# Definition for a  binary tree node
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:
    # @param root, a binary search tree's root node
    def __init__(self, root):
        self.stack=[]
        self.push_left(root)
    
    def push_left(self,root):
        temp=root
        if temp==None: return
        self.stack.append(temp)
        while temp.left!=None:
            temp=temp.left
            self.stack.append(temp)
            
    # @return a boolean, whether we have a next smallest number
    def hasNext(self):
        if self.stack: return 1
        else: return 0

    # @return an integer, the next smallest number
    def next(self):
        result=self.stack.pop()
        if result.right:
            #the node has right node, we need update stack
            self.push_left(result.right)
        return result.val

# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())
